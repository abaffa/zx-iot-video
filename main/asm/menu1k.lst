0001   0000             
0002   0000             ; Compile with  'C:\Program Files (x86)\Tasm32\TASM.EXE' -80 -b .\menu1k.asm .\menu1k.p .\menu1k.lst
0003   0000             
0004   0000             
0005   0000             
0006   0000             
0007   0000              
0008   0000             #define db .byte ;  cross-assembler definitions 
0009   0000             #define dw .word 
0010   0000             #define ds .block 
0011   0000             #define org .org 
0012   0000             #define end .end 
0013   0000             
0014   0000             
0015   0000             
0016   0000             #define COM_ADDR  0EFh
0017   0000             #define COM_DAT   06Fh
0018   0000             
0019   0000             #define ADDR_LED  020h
0020   0000             #define ADDR_SELA 030h
0021   0000             #define ADDR_SELB 038h
0022   0000             #define A_RHR 00h
0023   0000             #define A_THR 00h
0024   0000             #define A_IER 01h
0025   0000             #define A_FCR 02h
0026   0000             #define A_ISR 02h
0027   0000             #define A_LCR 03h
0028   0000             #define A_MCR 04h
0029   0000             #define A_LSR 05h
0030   0000             #define A_MSR 06h
0031   0000             #define A_SCPAD 07h
0032   0000             
0033   0000             #define ADDR_DISABLE 0
0034   0000             #define UPDATE	01FCh	; LOAD/SAVE adress update subroutine in ROM
0035   0000             
0036   0000             ;;#define VERBOSE 1
0037   0000              
0038   4009             org     $4009 ; BASIC PROGRAMM
0039   4009             ;= System variables ============================================ 
0040   4009              
0041   4009 00             db 0     	;VERSN 
0042   400A 00 00          dw 0     	;E_PPC 
0043   400C 03 41          dw dfile      ;D_FILE 
0044   400E 04 41          dw dfile+1    ;DF_CC 
0045   4010 1C 41          dw var   	;VARS 
0046   4012 00 00          dw 0     	;DEST 
0047   4014 1D 41          dw var+1      ;E_LINE 
0048   4016 1C 41          dw last-1     ;c_ADD 
0049   4018 00 00          dw 0     	;X_PTR 
0050   401A 1D 41          dw last  	;STKBOT 
0051   401C 1D 41          dw last  	;STKEND 
0052   401E 00             db 0     	;BERG 
0053   401F 5D 40          dw membot     ;MEM 
0054   4021 00             db 0     ;not used 
0055   4022 02             db 2     ;DF_SZ 
0056   4023 01 00          dw 1     ;S_TOP 
0057   4025 FF FF FF       db $FF,$FF,$FF     ;LAST_K 
0058   4028 37             db 55    ;MARGIN 
0059   4029 C3 40          dw line10     ;NXTLIN   line10   dfile
0060   402B 00 00          dw 0     ;OLDPPC 
0061   402D 00             db 0     ;FLAGX 
0062   402E 00 00          dw 0     ;STRLEN 
0063   4030 8D 0C          dw $0C8D      ;T_ADDR 
0064   4032 00 00          dw 0     ;SEED 
0065   4034 FF FF          dw $FFFF      ;FRAMES 
0066   4036 00 00          db 0,0   ;COORDS 
0067   4038 BC             db $BC   ;PR_CC 
0068   4039 21 18          db 33,24      ;S_POSN 
0069   403B 40             db 01000000B  ;CDFLAG 
0070   403C             
0071   403C             
0072   403C                ;ds 33    ;Print buffer --- now used for loader code, all loaded programs need to have the same !
0073   403C             ; relocatible loader code
0074   403C             PLOADER:
0075   403C             lwt_start:
0076   403C 0E FE           ld c,$fe   ; 7
0077   403E 06 08           ld b,8  ; 7    for gap between start and bits
0078   4040             
0079   4040             lwt_stdly:                  ; 25 cycles=7.7us
0080   4040 DB FE           in a,($FE)  ; 11
0081   4042 17              rla         ; 4
0082   4043 30 FB           jr nc,lwt_stdly ; 12 / 7  (D7=0 is low level, wait for high)
0083   4045                 ; trigger is seen 4us too late in average, so wait 48-4 - 4 us now: 130 cy in-in
0084   4045             lgapdly:
0085   4045 10 FE           djnz lgapdly     ; 13*n-5 = 99 for 8
0086   4047 06 08           ld b,8  ; 7
0087   4049             lbloop:                 ;  need 104 for 32us
0088   4049 ED 50           in d,(c)    ; 12
0089   404B CB 12           rl d        ; 8
0090   404D 17              rla         ; 4 (rr a is 8)
0091   404E 16 04           ld d,4      ; 7
0092   4050             lbdly:
0093   4050 15              dec d          ; 4          b*16-5 = 59
0094   4051 20 FD           jr nz,lbdly     ; 12 / 7
0095   4053 10 F4           djnz lbloop     ; 13 / 8
0096   4055 77              ld (hl),a   ; 7
0097   4056             
0098   4056 CD FC 01    	CALL UPDATE  ; will use DE, inc HL    77 clks
0099   4059 18 E1           jr lwt_start     ; 12
0100   405B             PLOADEND:
0101   405B                ds PLOADER+33-PLOADEND    ; Remaining space of 33 byte print buffer, after 29 byte loader
0102   405D             
0103   405D             membot: 
0104   405D                ds 30    ;Calculatorï¿½s memory area 
0105   407B                ds 2     ;not used 
0106   407D              
0107   407D             ;= First BASIC line, asm code ================================== 
0108   407D              
0109   407D             line0: 
0110   407D 00 00          db 0,0   ;line number 
0111   407F 42 00          dw line10-$-2 ;line length 
0112   4081 EA             db $ea   ; REM 
0113   4082             
0114   4082             
0115   4082             #define ELINE	4014h  ; Systemvariable, die das Ende des abzuspeichernen BASIC-Programs anzeigt
0116   4082             #define ELINEHI	4015h  ; Systemvariable, die das Ende des abzuspeichernen BASIC-Programs anzeigt
0117   4082             
0118   4082             #define SHOW	0207h  ; ROM-Routinen
0119   4082             #define FAST	02E7h
0120   4082             #define RCLS	0A2Ah
0121   4082             #define GETKEY	02BBh
0122   4082             
0123   4082             
0124   4082             #DEFINE RST_PRTCHAR RST 10H
0125   4082             #DEFINE c_SPACE 0
0126   4082             #DEFINE c_NEWLINE 76H
0127   4082             #DEFINE c_0 1CH
0128   4082             
0129   4082             #DEFINE c_A 38
0130   4082             #DEFINE c_B (c_A+1)
0131   4082             #DEFINE c_C (c_A+2)
0132   4082             #DEFINE c_D (c_A+3)
0133   4082             #DEFINE c_E (c_A+4)
0134   4082             #DEFINE c_F (c_A+5)
0135   4082             #DEFINE c_G (c_A+6)
0136   4082             #DEFINE c_H (c_A+7)
0137   4082             #DEFINE c_I (c_A+8)
0138   4082             #DEFINE c_J (c_A+9)
0139   4082             #DEFINE c_K (c_J+1)
0140   4082             #DEFINE c_L (c_J+2)
0141   4082             #DEFINE c_M (c_J+3)
0142   4082             #DEFINE c_N (c_J+4)
0143   4082             #DEFINE c_O (c_J+5)
0144   4082             #DEFINE c_P (c_J+6)
0145   4082             #DEFINE c_Q (c_J+7)
0146   4082             #DEFINE c_R (c_J+8)
0147   4082             #DEFINE c_S (c_J+9)
0148   4082             #DEFINE c_T (c_S+1)
0149   4082             #DEFINE c_U (c_S+2)
0150   4082             #DEFINE c_V (c_S+3)
0151   4082             #DEFINE c_W (c_S+4)
0152   4082             #DEFINE c_X (c_S+5)
0153   4082             #DEFINE c_Y (c_S+6)
0154   4082             #DEFINE c_Z (c_S+7)
0155   4082             
0156   4082             
0157   4082             
0158   4082             ;
0159   4082             ;   === Main entry point ====
0160   4082             ;
0161   4082             
0162   4082             BASIC_START:
0163   4082             
0164   4082 CD E7 02    	CALL FAST	; here we go
0165   4085                 ; send msg back
0166   4085 CD 46 0F        CALL $0F46  ; go to fast mode
0167   4088 06 A0           LD B,160  ; 200=160ms
0168   408A C5          W1: push BC
0169   408B 06 00           ld b,0
0170   408D             W2:
0171   408D 10 FE           djnz W2     ; 4usec * B*B
0172   408F C1              pop BC
0173   4090 10 F8           djnz W1
0174   4092 1E 49           LD E, 73    ; ID for menu reply
0175   4094 CD 1F 03        call $031F  ; SAVE byte in E
0176   4097 1E 01           LD E, 1    ; ID for menu reply
0177   4099 CD 1F 03        call $031F  ; SAVE byte in E
0178   409C 1E 00           LD E, 0    ; send dummy as end
0179   409E CD 1F 03        call $031F ;
0180   40A1                 ; /* reset stack pointer */
0181   40A1 2A 02 40    	LD HL,(16386) ; ERR_SP
0182   40A4 F9          	LD SP,HL
0183   40A5 21 76 06        LD HL, $0676    ; return address in NEXT-LINE like when LOADING
0184   40A8 E3          	EX (SP),HL
0185   40A9             #if 1
0186   40A9                 ; run loader from stack area
0187   40A9                 ; max used size for 1k programs is at $4009 + 949/952 bytes
0188   40A9                 ; the 32 byte loader fits at RAMTOP-60 givig stack just enough space
0189   40A9 01 C4 FF        LD BC,-60
0190   40AC 2A 04 40    	LD HL,(16388) ; RAMTOP
0191   40AF                 
0192   40AF 09              ADD HL,BC
0193   40B0 E5              PUSH HL     ; address of quick loader on stack, can use RET later to go there
0194   40B1 EB              EX DE,HL
0195   40B2 21 3C 40        LD HL,PLOADER
0196   40B5 01 20 00        LD BC,32
0197   40B8 ED B0           LDIR
0198   40BA                 ; LD DE,32708 hardcoded position, would not work with moved RAMTOP
0199   40BA 21 15 40    	LD HL,ELINEHI
0200   40BD 34          	INC (HL) ; make sure no match during load
0201   40BE 21 09 40    	LD HL,4009h	; start of BASIC area to load
0202   40C1 C9              RET      ; go to calculated address below RAMTOP  jp 32708
0203   40C2~            #else
0204   40C2~            	LD HL,ELINEHI
0205   40C2~            	INC (HL) ; make sure no match during load
0206   40C2~            	LD HL,4009h	; start of BASIC area to load
0207   40C2~                jp PLOADER
0208   40C2             #endif
0209   40C2 76             db $76   ;N/L 
0210   40C3             
0211   40C3             line10:
0212   40C3 00 0A          db 0,10  ;  line number 
0213   40C5 06 00          dw line20-$-2  ;line length 
0214   40C7 F1 26 0D 14    db 241,38,13,20,65,118   ;LET a$ = INKEY$
0214   40CB 41 76 
0215   40CD             
0216   40CD             line20:
0217   40CD 00 14          db 0,20  ; line number 
0218   40CF 11 00          dw line30-$-2  ;line length 
0219   40D1 FA 26 0D 14    db 250,38,13,20,11,11,222,236,29,28,126,132,32,0,0,0,118   ;IF a$ = "" THEN GOTO 10
0219   40D5 0B 0B DE EC 
0219   40D9 1D 1C 7E 84 
0219   40DD 20 00 00 00 
0219   40E1 76 
0220   40E2             
0221   40E2             line30:
0222   40E2 00 1E          db 0,30  ;  line number 
0223   40E4 0E 00          dw line50-$-2  ;line length 
0224   40E6 F4 C5 0B 1D    db 244,197,11, 29,34,33,31,34, 11,26,196,38,13,118   ;POKE VAL "16536",CODE a$
0224   40EA 22 21 1F 22 
0224   40EE 0B 1A C4 26 
0224   40F2 0D 76 
0225   40F4             
0226   40F4             line50:
0227   40F4 00 32          db 0,50  ;line number 
0228   40F6 0B 00          dw dfile-$-2  ;line length 
0229   40F8 F5             db $f5   ;PRINT 
0230   40F9 D4             db $d4   ;USR 
0231   40FA C5             db $c5   ;VAL
0232   40FB 0B             db $0b   ;"
0233   40FC 1D             db $1d   ;1 
0234   40FD 22             db $22   ;6 
0235   40FE 21             db $21   ;5 
0236   40FF 1D             db $1d   ;1 
0237   4100 20             db $20   ;4 
0238   4101 0B             db $0b   ;"
0239   4102 76             db $76   ;N/L 
0240   4103             
0241   4103             
0242   4103                
0243   4103             ;- Display file -------------------------------------------- 
0244   4103              
0245   4103             dfile: 
0246   4103 76             db $76 
0247   4104                ;db c_Z,c_X,0,0,c_I,c_O,c_T,
0248   4104 76 76 76 76    db $76,$76,$76,$76,$76,$76,$76,$76 
0248   4108 76 76 76 76 
0249   410C 76 76 76 76    db $76,$76,$76,$76,$76,$76,$76,$76 
0249   4110 76 76 76 76 
0250   4114 76 76 76 76    db $76,$76,$76,$76,$76,$76,$76,$76 
0250   4118 76 76 76 76 
0251   411C              
0252   411C             ;- BASIC-Variables ---------------------------------------- 
0253   411C              
0254   411C             var: 
0255   411C 80             db $80 
0256   411D              
0257   411D             ;- End of program area ---------------------------- 
0258   411D             
0259   411D             last: 
0260   411D              
0261   411D                end 
tasm: Number of errors = 0
